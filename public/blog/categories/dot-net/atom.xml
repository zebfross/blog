<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: .net | Musings of a Software Enthusiast]]></title>
  <link href="http://blog.zebfross.com/blog/categories/dot-net/atom.xml" rel="self"/>
  <link href="http://blog.zebfross.com/"/>
  <updated>2014-11-11T21:03:34-07:00</updated>
  <id>http://blog.zebfross.com/</id>
  <author>
    <name><![CDATA[Zeb Fross]]></name>
    <email><![CDATA[zebfross@hotmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript in Web Applications]]></title>
    <link href="http://blog.zebfross.com/blog/2014/11/03/javascript-in-a-web-application/"/>
    <updated>2014-11-03T21:04:15-07:00</updated>
    <id>http://blog.zebfross.com/blog/2014/11/03/javascript-in-a-web-application</id>
    <content type="html"><![CDATA[<p>Harnessing the power of JavaScript in a web application can improve speed, flexibility, and overall user experience.  Here are some basics regarding the use of JavaScript.</p>

<p>When retrieving server data, there are a few choices of format.  Most commonly, the server will return data formatted as JSON or data formatted as HTML.  If JSON is returned, the client will parse the response and decide for itself what to do with the information.  If HTML is returned, the client will most likely place the html somewhere on the page.  Both options have advantages and disadvantages.</p>

<p>As a common theme that will be seen in many of my future articles, jQuery isn&rsquo;t the only library for doing ajax requests.  Any of the following are perfectly good (and lighter-weight) alternatives.</p>

<p style="text-align:center;"><a href="https://github.com/ForbesLindesay/ajax" target="_blank">ajax</a> | <a href="https://github.com/then/request" target="_blank">request</a> | <a href="https://github.com/ded/Reqwest" target="_blank">reqwest</a></p>

<h2>Retrieving HTML Data</h2>

<p>&#8220;` plain scripts.js
reqwest({
    url: &lsquo;/Client/Index&rsquo;,
    method: &lsquo;GET&rsquo;,
    type: &lsquo;html&rsquo;,
    success: function (html) {
        console.log(html);
    },
    error: function (err) {
        console.log(err);
    }
});</p>

<p>/*
prints:</p>

<ul>
    <li>Bob Johnson</li>
    <li>Sally Sue</li>
    <li>Chris Howard</li>
</ul>


<p>*/
&#8220;`</p>

<!--more-->


<pre><code class="plain ClientController.cs">public partial class ClientController : Controller
{
    private BlogContext db = new BlogContext();

    public ActionResult Index()
    {
        return PartialView("List", db.Clients());
    }
}
</code></pre>

<p>&#8220;` plain List.cshtml
@model IEnumerable&lt;Blog.Client></p>

<ul>
@foreach(Blog.Client c in Model)
{
    <li>@c.FullName</li>
}
</ul>


<pre><code>
Retrieving JSON Data
-------------------
</code></pre>

<p>reqwest({ // reqwest library
    url: &lsquo;/Client/Index&rsquo;,
    method: &lsquo;GET&rsquo;,
    type: &lsquo;json&rsquo;, // means we will get a json object passed to our success function
    success: function (json) {
        console.log(json);
    },
    error: function (err) {
        console.log(err);
    }
});</p>

<p>/<em>
prints:
[
    {
        &ldquo;FirstName&rdquo; : &ldquo;Bob&rdquo;,
        &ldquo;LastName&rdquo; : &ldquo;Johnson&rdquo;,
        &ldquo;Location&rdquo; : null,
        &ldquo;BirthDate&rdquo; : &ldquo;\/Date(344502000000)\/&rdquo;
    },
    &hellip;
]
</em>/
&#8220;`</p>

<pre><code class="plain ClientController.cs">public class ClientController : Controller
{
    private BlogContext db = new BlogContext();

    public JsonResult Index()
    {
        return Json(db.Clients(), JsonRequestBehavior.AllowGet);
    }
}
</code></pre>

<h2>Gotchas</h2>

<ol>
<li><strong>&ldquo;Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource&hellip;&rdquo;</strong><br/>
Browsers prevent javascript from making requests to other domains.  Fortunately, modern browsers &ndash; clear back to IE8 &ndash; support CORS.  Refer to <a href="#cors">the CORS section below</a> for how to implement it.</li>
</ol>


<h2>Sending Data to the Server</h2>

<pre><code class="plain scripts.js {% raw %}">var data = "FirstName={{FirstName}}&amp;LastName={{LastName}}&amp;Location={{Location}}&amp;BirthDate={{BirthDate}}";
data = data.replace(/{{FirstName}}/g, document.getElementById("FirstName").value);
data = data.replace(/{{LastName}}/g, document.getElementById("LastName").value);
data = data.replace(/{{Location}}/g, document.getElementById("Location").value);
data = data.replace(/{{BirthDate}}/g, document.getElementById("BirthDate").value);
// note that jQuery makes this more succinct: 'data = $("#client-form").serialize();'

reqwest({
    url: document.forms["client-form"].action,
    method: document.forms["client-form"].method,
    type: 'html',
    data: data,
    success: function () {
        console.log("success");
    },
    error: function () {
        console.log("error");
    }
});
</code></pre>

<pre><code class="plain ClientController.cs">public partial class ClientController : Controller
{
    private BlogContext db = new BlogContext();

    public ActionResult Create()
    {
        return View();
    }

    [HttpPost()]
    public ActionResult Create(Client model)
    {
        db.AddClient(model);
        return RedirectToAction("Index");
    }
}
</code></pre>

<p>Please note that the above action method accepts a complex object as a parameter.  This works because of the .NET framework, but there is a gotcha that is explained below.</p>

<pre><code class="plain Create.cshtml">&lt;form id="client-form" action="@Url.Action("Create")" method="post"&gt;
    &lt;label for="FirstName"&gt;First Name:&lt;/label&gt; &lt;input type="text" name="FirstName" id="FirstName" /&gt;
    &lt;label for="LastName"&gt;Last Name:&lt;/label&gt; &lt;input type="text" name="LastName" id="LastName" /&gt;
    &lt;label for="Location"&gt;Location:&lt;/label&gt; &lt;input type="text" name="Location" id="Location" /&gt;
    &lt;label for="BirthDate"&gt;Date of Birth:&lt;/label&gt; &lt;input type="datetime" name="BirthDate" id="BirthDate" /&gt;
&lt;/form&gt;
</code></pre>

<h2>Submitting json data:</h2>

<pre><code class="plain scripts.js">var data = {"FirstName": ..., "LastName": ...};

reqwest({
    url: document.forms["client-form"].action,
    method: document.forms["client-form"].method,
    type: 'json',
    data: data,
    success: function () {
        console.log("success");
    },
    error: function () {
        console.log("error");
    }
});
</code></pre>

<p>The server does not need to change to accept json data.</p>

<h2>Gotchas</h2>

<ol>
<li><p><strong>The action method parameter isn&rsquo;t being populated even though the data is being sent.</strong><br/>
By far the sneakiest cause of this issue is that the .NET framework only populates <em>properties</em> of an object.  Thus, even if the object type has the correct members, the members have to be declared as properties, not just public fields.</p></li>
<li><p><strong>The action method parameter isn&rsquo;t being populated, but I&rsquo;m not sure if the data is being sent correctly or not.</strong><br/>
Use the browser&rsquo;s developer tools to inspect the request being sent.  It should show exactly what data was sent to the server.  Make sure the data was actually sent and that the variables are named correctly.</p></li>
</ol>


<h2><a id="cors"></a>Cross-Origin Resource Sharing (CORS)</h2>

<p>It is common to see the &ldquo;cross-origin request blocked&hellip;&rdquo; error when playing with JavaScript.  Unfortunately, the solution is less common; most resort to server proxies or JSONP.  There is, however, another option that is both elegant and unobtrusive, and the best part is that it works in most browsers clear back to IE8!  Here is how it works:</p>

<ol>
<li>A request is made with JavaScript.</li>
<li>Seeing that it is a cross-origin request, the browser first sends an HTTP OPTIONS request (no different than POST, PUT, etc.) to the exact same url.</li>
<li>If the server responds to the OPTIONS request with the <em>correct headers</em>, the browser allows the request to continue.</li>
</ol>


<p>Nifty, right?  In order to implement it, the server must respond with the &ldquo;Access-Control-Allow-Origin&rdquo; header set to the origin of the requester.  In .NET, this can be done with the following code:</p>

<pre><code class="plain">String origin = HttpContext.Request.UrlReferrer.Scheme + "://" + HttpContext.Request.UrlReferrer.Authority;
HttpContext.Response.Headers.Add("Access-Control-Allow-Origin", origin);
</code></pre>

<p>Note that some say to add &ldquo;Access-Control-Allow-Origin: *&rdquo;, but that doesn&rsquo;t work it all situations.  Lists also do not work, as in &ldquo;Access-Control-Allow-Origin: domain.com, another.com.&rdquo;  The safest path is the one described above.  In the case of cross-origin file uploads, the following header may also be required:</p>

<pre><code class="plain">Access-Control-Allow-Headers: Content-Type, Content-Range, Content-Disposition, Content-Description
</code></pre>

<p>If cookies are being sent along in the request, set the <em>Access Control Allow Credentials</em> to <em>true</em>.</p>

<pre><code class="plain">Access-Control-Allow-Credentials: true
</code></pre>

<h2>Gotchas</h2>

<ol>
<li><p><strong>It still says &ldquo;cross-origin request blocked&hellip;&rdquo;, and the headers are <em>not</em> being set correctly.</strong><br/>
Make sure the server isn&rsquo;t throwing an exception.  The headers may not be set correctly in that case, causing the request to fail.  Also, make sure the server responds correctly to HTTP OPTIONS requests.  Try making a request with <a href="https://addons.mozilla.org/en-US/firefox/addon/httprequester/" target="_blank">HTTPRequester</a> or other tool.</p></li>
<li><p><strong>It still says &ldquo;cross-origin request blocked&hellip;&rdquo;, and the headers <em>are</em> being set correctly.</strong><br/>
Make sure the access-control-allow-origin header is <em>exactly</em> the same as the origin header property in the request, e.g. no trailing slashes.  Also keep in mind that the browser gives this &ldquo;cross-origin request blocked&hellip;&rdquo; error very liberally even in situations where the request wasn&rsquo;t blocked, the server just returned an error code.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
